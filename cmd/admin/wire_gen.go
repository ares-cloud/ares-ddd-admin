// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/ares-cloud/ares-ddd-admin/cmd/admin/server"
	"github.com/ares-cloud/ares-ddd-admin/internal/base"
	handlers2 "github.com/ares-cloud/ares-ddd-admin/internal/base/application/handlers"
	service2 "github.com/ares-cloud/ares-ddd-admin/internal/base/domain/service"
	"github.com/ares-cloud/ares-ddd-admin/internal/base/infrastructure/base/casbin"
	"github.com/ares-cloud/ares-ddd-admin/internal/base/infrastructure/base/oplog"
	"github.com/ares-cloud/ares-ddd-admin/internal/base/infrastructure/converter"
	handlers3 "github.com/ares-cloud/ares-ddd-admin/internal/base/infrastructure/handlers"
	"github.com/ares-cloud/ares-ddd-admin/internal/base/infrastructure/persistence/data"
	"github.com/ares-cloud/ares-ddd-admin/internal/base/infrastructure/persistence/repository"
	cache2 "github.com/ares-cloud/ares-ddd-admin/internal/base/infrastructure/query/cache"
	"github.com/ares-cloud/ares-ddd-admin/internal/base/infrastructure/query/impl"
	rest2 "github.com/ares-cloud/ares-ddd-admin/internal/base/interfaces/rest"
	"github.com/ares-cloud/ares-ddd-admin/internal/infrastructure/configs"
	"github.com/ares-cloud/ares-ddd-admin/internal/infrastructure/database"
	"github.com/ares-cloud/ares-ddd-admin/internal/infrastructure/database/cache"
	"github.com/ares-cloud/ares-ddd-admin/internal/monitoring"
	"github.com/ares-cloud/ares-ddd-admin/internal/monitoring/application/handlers"
	"github.com/ares-cloud/ares-ddd-admin/internal/monitoring/domain/service"
	"github.com/ares-cloud/ares-ddd-admin/internal/monitoring/interfaces/rest"
	storage2 "github.com/ares-cloud/ares-ddd-admin/internal/storage"
	handlers4 "github.com/ares-cloud/ares-ddd-admin/internal/storage/application/handlers"
	service3 "github.com/ares-cloud/ares-ddd-admin/internal/storage/domain/service"
	"github.com/ares-cloud/ares-ddd-admin/internal/storage/infrastructure/cleaner"
	repository2 "github.com/ares-cloud/ares-ddd-admin/internal/storage/infrastructure/persistence/repository"
	"github.com/ares-cloud/ares-ddd-admin/internal/storage/infrastructure/storage"
	rest3 "github.com/ares-cloud/ares-ddd-admin/internal/storage/interfaces/rest"
	"github.com/ares-cloud/ares-ddd-admin/pkg/database/snowflake_id"
	"github.com/ares-cloud/ares-ddd-admin/pkg/events"
)

import (
	_ "github.com/ares-cloud/ares-ddd-admin/docs/admin"
)

// Injectors from wire.go:

// wireApp init application.
func wireApp(bootstrap *configs.Bootstrap, configsData *configs.Data, storageConfig *configs.StorageConfig) (*app, func(), error) {
	redisClient, cleanup, err := database.NewHdbClient(configsData)
	if err != nil {
		return nil, nil, err
	}
	metricsService := service.NewMetricsService()
	metricsQueryHandler := handlers.NewMetricsQueryHandler(metricsService)
	metricsController := rest.NewMetricsController(metricsQueryHandler)
	iIdGenerate := snowflake_id.NewSnowIdGen()
	iDataBase, cleanup2, err := database.NewDataBase(iIdGenerate, configsData)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	iOperationLogRepository := repository.NewOperationLogRepository(iDataBase)
	iDbOperationLogWrite := oplog.NewDbOperationLogWriter(iOperationLogRepository)
	iSysRoleRepo := data.NewSysRoleRepo(iDataBase)
	iPermissionsRepo := data.NewSysMenuRepo(iDataBase)
	iRoleRepository := repository.NewRoleRepository(iSysRoleRepo, iPermissionsRepo)
	eventBus := events.NewEventBus()
	roleCommandService := service2.NewRoleCommandService(iRoleRepository, eventBus)
	roleCommandHandler := handlers2.NewRoleCommandHandler(roleCommandService)
	roleConverter := converter.NewRoleConverter()
	permissionsConverter := converter.NewPermissionsConverter()
	roleQueryService := impl.NewRoleQueryService(iSysRoleRepo, roleConverter, permissionsConverter)
	client := database.NewRc(redisClient)
	cacheCache := cache.NewCache(redisClient, client)
	cacheDecorator := cache.NewCacheDecorator(cacheCache)
	roleQueryCache := cache2.NewRoleQueryCache(roleQueryService, cacheDecorator)
	roleQueryHandler := handlers2.NewRoleQueryHandler(roleQueryCache, roleConverter)
	iPermissionsRepository := casbin.NewRepositoryImpl(iSysRoleRepo, iPermissionsRepo)
	enforcer, err := server.NewCasBinEnforcer(redisClient, iPermissionsRepository)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	sysRoleController := rest2.NewSysRoleController(roleCommandHandler, roleQueryHandler, enforcer)
	iSysUserRepo := data.NewSysUserRepo(iDataBase)
	iUserRepository := repository.NewUserRepository(iSysUserRepo, iSysRoleRepo)
	userCommandService := service2.NewUserCommandService(iUserRepository, eventBus)
	userCommandHandler := handlers2.NewUserCommandHandler(userCommandService)
	userConverter := converter.NewUserConverter()
	userQueryService := impl.NewUserQueryService(iSysUserRepo, iSysRoleRepo, iPermissionsRepo, userConverter, roleConverter, permissionsConverter)
	userQueryCache := cache2.NewUserQueryCache(userQueryService, cacheDecorator)
	userQueryHandler := handlers2.NewUserQueryHandler(userQueryCache)
	sysUserController := rest2.NewSysUserController(userCommandHandler, userQueryHandler, enforcer)
	iSysTenantRepo := data.NewSysTenantRepo(iDataBase)
	iTenantRepository := repository.NewTenantRepository(iSysTenantRepo, iSysUserRepo)
	tenantCommandService := service2.NewTenantCommandService(iTenantRepository, eventBus)
	tenantCommandHandler := handlers2.NewTenantCommandHandler(tenantCommandService)
	tenantConverter := converter.NewTenantConverter(userConverter)
	tenantQueryService := impl.NewTenantQueryService(iSysTenantRepo, iSysUserRepo, iPermissionsRepo, tenantConverter, permissionsConverter)
	tenantQueryCache := cache2.NewTenantQueryCache(tenantQueryService, cacheDecorator)
	tenantQueryHandler := handlers2.NewTenantQueryHandler(tenantQueryCache)
	sysTenantController := rest2.NewSysTenantController(tenantCommandHandler, tenantQueryHandler, enforcer)
	repositoryIPermissionsRepository := repository.NewPermissionsRepository(iPermissionsRepo)
	permissionService := service2.NewPermissionService(repositoryIPermissionsRepository, eventBus)
	permissionsCommandHandler := handlers2.NewPermissionsCommandHandler(permissionService, enforcer)
	permissionsQueryService := impl.NewPermissionsQueryService(iPermissionsRepo, permissionsConverter)
	permissionsQueryCache := cache2.NewPermissionsQueryCache(permissionsQueryService, cacheDecorator)
	permissionsQueryHandler := handlers2.NewPermissionsQueryHandler(permissionsQueryCache)
	sysPermissionsController := rest2.NewSysPermissionsController(permissionsCommandHandler, permissionsQueryHandler, enforcer)
	iAuthRepository := repository.NewAuthRepository(iUserRepository, redisClient)
	iLoginLogRepository := repository.NewLoginLogRepository(iDataBase)
	authHandler := handlers2.NewAuthHandler(iAuthRepository, userQueryCache, iLoginLogRepository)
	authController := rest2.NewAuthController(authHandler)
	loginLogQueryHandler := handlers2.NewLoginLogQueryHandler(iLoginLogRepository)
	loginLogController := rest2.NewLoginLogController(loginLogQueryHandler, enforcer)
	operationLogQueryHandler := handlers2.NewOperationLogQueryHandler(iOperationLogRepository)
	operationLogController := rest2.NewOperationLogController(operationLogQueryHandler, enforcer)
	iSysDepartmentRepo := data.NewSysDepartmentRepo(iDataBase)
	iDepartmentRepository := repository.NewDepartmentRepository(iSysDepartmentRepo)
	departmentService := service2.NewDepartmentService(iDepartmentRepository, iUserRepository, eventBus)
	departmentCommandHandler := handlers2.NewDepartmentCommandHandler(departmentService)
	departmentConverter := converter.NewDepartmentConverter()
	departmentQueryService := impl.NewDepartmentQueryService(iSysDepartmentRepo, iSysUserRepo, departmentConverter, userConverter)
	departmentQueryCache := cache2.NewDepartmentQueryCache(departmentQueryService, cacheDecorator)
	departmentQueryHandler := handlers2.NewDepartmentQueryHandler(departmentQueryCache)
	departmentController := rest2.NewDepartmentController(departmentCommandHandler, departmentQueryHandler, enforcer)
	iDataPermissionRepository := repository.NewDataPermissionRepository(iDataBase)
	dataPermissionCommandHandler := handlers2.NewDataPermissionCommandHandler(iDataPermissionRepository)
	dataPermissionQueryHandler := handlers2.NewDataPermissionQueryHandler(iDataPermissionRepository)
	dataPermissionController := rest2.NewDataPermissionController(dataPermissionCommandHandler, dataPermissionQueryHandler)
	eventHandler := cache2.NewCacheEventHandler(userQueryCache)
	userEventHandler := handlers3.NewUserEventHandler()
	handlerEvent := handlers3.NewHandlerEvent(eventBus, eventHandler, userEventHandler)
	baseServer := base.NewBaseServer(sysRoleController, sysUserController, sysTenantController, sysPermissionsController, authController, loginLogController, operationLogController, departmentController, dataPermissionController, handlerEvent)
	monitoringServer := monitoring.NewServer(metricsController)
	iStorageRepository := repository2.NewStorageRepository(iDataBase)
	storageQueryHandler := handlers4.NewStorageQueryHandler(iStorageRepository)
	storageFactory := storage.NewStorageFactory(storageConfig, redisClient)
	storageService := service3.NewStorageService(iStorageRepository, storageFactory)
	storageCommandHandler := handlers4.NewStorageCommandHandler(storageService)
	storageController := rest3.NewStorageController(storageQueryHandler, storageCommandHandler, storageService)
	recycleCleaner := cleaner.NewRecycleCleaner(iStorageRepository, storageService, storageConfig)
	storageServer, cleanup3, err := storage2.NewServer(storageController, recycleCleaner)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	serve := server.NewServer(bootstrap, redisClient, metricsController, iDbOperationLogWrite, baseServer, monitoringServer, storageServer)
	mainApp := newApp(serve)
	return mainApp, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
